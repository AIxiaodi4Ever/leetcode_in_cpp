class Solution {
private:
    const uint32_t M1 = 0x55555555; // 01010101010101010101010101010101
    const uint32_t M2 = 0x33333333; // 00110011001100110011001100110011
    const uint32_t M4 = 0x0f0f0f0f; // 00001111000011110000111100001111
    const uint32_t M8 = 0x00ff00ff; // 00000000111111110000000011111111

public:
    // 注意移位运算的优先级大于按位逻辑运算
    uint32_t reverseBits(uint32_t n) {
        // |左边保留了奇数位（组），|右边保留了偶数位（组），然后奇数位右移变成偶数位，偶数位同理，用|结合后，完成交换
        n = n >> 1 & M1 | (n & M1) << 1;
        n = n >> 2 & M2 | (n & M2) << 2;
        n = n >> 4 & M4 | (n & M4) << 4;
        n = n >> 8 & M8 | (n & M8) << 8;

        return n >> 16 | n << 16;
    }
};