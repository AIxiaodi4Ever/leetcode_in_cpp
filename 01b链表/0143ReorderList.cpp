/**
?*?Definition?for?singly-linked?list.
?*?struct?ListNode?{
?*?????int?val;
?*?????ListNode?*next;
?*?????ListNode()?:?val(0),?next(nullptr)?{}
?*?????ListNode(int?x)?:?val(x),?next(nullptr)?{}
?*?????ListNode(int?x,?ListNode?*next)?:?val(x),?next(next)?{}
?*?};
?*/
class?Solution?{
public:
????void?reorderList(ListNode*?head)?
????{
????????if?(head?==?nullptr)
????????????return;
????????ListNode*?mid?=?find_mid(head);
????????ListNode*?front?=?head;
????????ListNode*?back?=?mid->next;
????????//?即使反转链表中间的指针仍然连接
????????mid->next?=?nullptr;
????????back?=?reverse_list(back);
????????combine_list(front,?back);
????}
????//?如果有奇数个节点，前半部分即1到slow(包括slow)有(n+1)/2个，后半部分有(n-1)/2个
????ListNode*?find_mid(ListNode*?head)
????{
????????ListNode*?slow?=?head;
????????ListNode*?fast?=?head;
????????while?(fast->next?!=?nullptr?&&?fast->next->next?!=?nullptr)
????????{
????????????slow?=?slow->next;
????????????fast?=?fast->next->next;
????????}
????????return?slow;
????}
????ListNode*?reverse_list(ListNode*?head)
????{
????????ListNode*?prev_n?=?nullptr;
????????ListNode*?curr_n?=?head;
????????while?(curr_n?!=?nullptr)
????????{
????????????ListNode*?next_n?=?curr_n->next;
????????????curr_n->next?=?prev_n;
????????????prev_n?=?curr_n;
????????????curr_n?=?next_n;
????????}
????????return?prev_n;
????}
????void?combine_list(ListNode*?f,?ListNode*?b)
????{
????????ListNode*?f_tmp;
????????ListNode*?b_tmp;
????????while?(f?!=?nullptr?&&?b?!=?nullptr)
????????{
????????????f_tmp?=?f->next;
????????????b_tmp?=?b->next;
????????????f->next?=?b;
????????????b->next?=?f_tmp;
????????????f?=?f_tmp;
????????????b?=?b_tmp;
????????}
????}
};